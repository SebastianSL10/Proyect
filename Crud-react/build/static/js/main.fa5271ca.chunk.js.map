{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","data","id","personaje","anime","App","state","modalActualizar","modalInsertar","form","mostrarModalActualizar","dato","setState","cerrarModalActualizar","mostrarModalInsertar","cerrarModalInsertar","editar","contador","arreglo","map","registro","eliminar","window","confirm","splice","insertar","valorNuevo","length","lista","push","handleChange","e","target","name","value","Container","Button","color","onClick","Table","this","key","Modal","isOpen","ModalHeader","ModalBody","FormGroup","className","readOnly","type","onChange","ModalFooter","React","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.fa5271ca.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {\n  Table,\n  Button,\n  Container,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  FormGroup,\n  ModalFooter,\n} from \"reactstrap\";\n\nconst data = [\n  { id: 1, personaje: \"Naruto\", anime: \"Naruto\" },\n  { id: 2, personaje: \"Goku\", anime: \"Dragon Ball\" },\n  { id: 3, personaje: \"Kenshin Himura\", anime: \"Rurouni Kenshin\" },\n  { id: 4, personaje: \"Monkey D. Luffy\", anime: \"One Piece\" },\n  { id: 5, personaje: \"Edward Elric\", anime: \"Fullmetal Alchemist: Brotherhood\"},\n  { id: 6, personaje: \"Seto Kaiba\", anime: \"Yu-Gi-Oh!\" },\n];\n\nclass App extends React.Component {\n  state = {\n    data: data,\n    modalActualizar: false,\n    modalInsertar: false,\n    form: {\n      id: \"\",\n      personaje: \"\",\n      anime: \"\",\n    },\n  };\n\n  mostrarModalActualizar = (dato) => {\n    this.setState({\n      form: dato,\n      modalActualizar: true,\n    });\n  };\n\n  cerrarModalActualizar = () => {\n    this.setState({ modalActualizar: false });\n  };\n\n  mostrarModalInsertar = () => {\n    this.setState({\n      modalInsertar: true,\n    });\n  };\n\n  cerrarModalInsertar = () => {\n    this.setState({ modalInsertar: false });\n  };\n\n  editar = (dato) => {\n    var contador = 0;\n    var arreglo = this.state.data;\n    arreglo.map((registro) => {\n      if (dato.id == registro.id) {\n        arreglo[contador].personaje = dato.personaje;\n        arreglo[contador].anime = dato.anime;\n      }\n      contador++;\n    });\n    this.setState({ data: arreglo, modalActualizar: false });\n  };\n\n  eliminar = (dato) => {\n    var opcion = window.confirm(\"Estás Seguro que deseas Eliminar el elemento \"+dato.id);\n    if (opcion == true) {\n      var contador = 0;\n      var arreglo = this.state.data;\n      arreglo.map((registro) => {\n        if (dato.id == registro.id) {\n          arreglo.splice(contador, 1);\n        }\n        contador++;\n      });\n      this.setState({ data: arreglo, modalActualizar: false });\n    }\n  };\n\n  insertar= ()=>{\n    var valorNuevo= {...this.state.form};\n    valorNuevo.id=this.state.data.length+1;\n    var lista= this.state.data;\n    lista.push(valorNuevo);\n    this.setState({ modalInsertar: false, data: lista });\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      form: {\n        ...this.state.form,\n        [e.target.name]: e.target.value,\n      },\n    });\n  };\n\n  render() {\n    \n    return (\n      <>\n        <Container>\n        <br />\n          <Button color=\"info\" onClick={()=>this.mostrarModalInsertar()}>Crear</Button>\n          <br />\n          <br />\n          <Table>\n            <thead>\n              <tr>\n                <th>ID</th>\n                <th>Personaje</th>\n                <th>Anime</th>\n                <th>Acción</th>\n              </tr>\n            </thead>\n\n            <tbody>\n              {this.state.data.map((dato) => (\n                <tr key={dato.id}>\n                  <td>{dato.id}</td>\n                  <td>{dato.personaje}</td>\n                  <td>{dato.anime}</td>\n                  <td>\n                    <Button\n                      color=\"success\"\n                      onClick={() => this.mostrarModalActualizar(dato)}\n                    >\n                      Editar\n                    </Button>{\" \"}\n                    <Button color=\"danger\" onClick={()=> this.eliminar(dato)}>Eliminar</Button>\n                  </td>\n                </tr>\n              ))}\n            </tbody>\n          </Table>\n        </Container>\n\n        <Modal isOpen={this.state.modalActualizar}>\n          <ModalHeader>\n           <div><h3>Editar Registro</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>\n               Id:\n              </label>\n            \n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.form.id}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Personaje: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"personaje\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.personaje}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Anime: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"anime\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.form.anime}\n              />\n            </FormGroup>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              color=\"primary\"\n              onClick={() => this.editar(this.state.form)}\n            >\n              Editar\n            </Button>\n            <Button\n              color=\"danger\"\n              onClick={() => this.cerrarModalActualizar()}\n            >\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n\n\n\n        <Modal isOpen={this.state.modalInsertar}>\n          <ModalHeader>\n           <div><h3>Insertar Personaje</h3></div>\n          </ModalHeader>\n\n          <ModalBody>\n            <FormGroup>\n              <label>\n                Id: \n              </label>\n              \n              <input\n                className=\"form-control\"\n                readOnly\n                type=\"text\"\n                value={this.state.data.length+1}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Personaje: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"personaje\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n            \n            <FormGroup>\n              <label>\n                Anime: \n              </label>\n              <input\n                className=\"form-control\"\n                name=\"anime\"\n                type=\"text\"\n                onChange={this.handleChange}\n              />\n            </FormGroup>\n          </ModalBody>\n\n          <ModalFooter>\n            <Button\n              color=\"primary\"\n              onClick={() => this.insertar()}\n            >\n              Insertar\n            </Button>\n            <Button\n              className=\"btn btn-danger\"\n              onClick={() => this.cerrarModalInsertar()}\n            >\n              Cancelar\n            </Button>\n          </ModalFooter>\n        </Modal>\n      </>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}